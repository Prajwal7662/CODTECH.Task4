import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, DBSCAN
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
from sklearn.metrics import silhouette_score, davies_bouldin_score
from sklearn.decomposition import PCA

# Step 1: Load the dataset
# Assuming a CSV file for example
df = pd.read_csv('library_data.csv')

# Display the first few rows to understand the dataset structure
print(df.head())

# Step 2: Preprocess the Data
# Handle missing values by dropping rows (or imputing)
df = df.dropna()

# Convert categorical columns to numerical (if necessary)
df = pd.get_dummies(df, columns=['Genre', 'User_Type'])  # Replace with relevant columns

# Normalize the data
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df)

# Step 3: K-means Clustering
# Using Elbow Method to find the optimal number of clusters
wcss = []  # Within-cluster sum of squares (inertia)
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=42)
    kmeans.fit(df_scaled)
    wcss.append(kmeans.inertia_)

# Plot the elbow graph
plt.figure(figsize=(6, 4))
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

# Apply K-means with the optimal k (let's assume k=3 from the elbow method)
kmeans = KMeans(n_clusters=3, init='k-means++', max_iter=300, n_init=10, random_state=42)
df['Cluster_KMeans'] = kmeans.fit_predict(df_scaled)

# Step 4: Hierarchical Clustering
# Perform hierarchical clustering and plot the dendrogram
Z = linkage(df_scaled, method='ward')

plt.figure(figsize=(10, 7))
dendrogram(Z)
plt.title('Dendrogram for Hierarchical Clustering')
plt.xlabel('Samples')
plt.ylabel('Distance')
plt.show()

# Cut the dendrogram to create clusters (assuming 3 clusters)
df['Cluster_Hierarchical'] = fcluster(Z, t=3, criterion='maxclust')

# Step 5: DBSCAN Clustering
# Apply DBSCAN
dbscan = DBSCAN(eps=0.5, min_samples=5)
df['Cluster_DBSCAN'] = dbscan.fit_predict(df_scaled)

# Step 6: Evaluate the Clustering Performance
# Silhouette Score and Davies-Bouldin Index for K-means
silhouette_kmeans = silhouette_score(df_scaled, df['Cluster_KMeans'])
db_index_kmeans = davies_bouldin_score(df_scaled, df['Cluster_KMeans'])
print(f'Silhouette Score for K-means: {silhouette_kmeans}')
print(f'Davies-Bouldin Index for K-means: {db_index_kmeans}')

# Silhouette Score and Davies-Bouldin Index for Hierarchical Clustering
silhouette_hierarchical = silhouette_score(df_scaled, df['Cluster_Hierarchical'])
db_index_hierarchical = davies_bouldin_score(df_scaled, df['Cluster_Hierarchical'])
print(f'Silhouette Score for Hierarchical Clustering: {silhouette_hierarchical}')
print(f'Davies-Bouldin Index for Hierarchical Clustering: {db_index_hierarchical}')

# Silhouette Score and Davies-Bouldin Index for DBSCAN
silhouette_dbscan = silhouette_score(df_scaled, df['Cluster_DBSCAN'])
db_index_dbscan = davies_bouldin_score(df_scaled, df['Cluster_DBSCAN'])
print(f'Silhouette Score for DBSCAN: {silhouette_dbscan}')
print(f'Davies-Bouldin Index for DBSCAN: {db_index_dbscan}')

# Step 7: Visualize the Clustering Results
# Reduce dimensionality to 2D using PCA for visualization

pca = PCA(n_components=2)
df_pca = pca.fit_transform(df_scaled)

# Visualize K-means clustering result
plt.figure(figsize=(6, 4))
plt.scatter(df_pca[:, 0], df_pca[:, 1], c=df['Cluster_KMeans'], cmap='viridis')
plt.title('K-means Clustering (PCA projection)')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.colorbar()
plt.show()

# Visualize Hierarchical clustering result
plt.figure(figsize=(6, 4))
plt.scatter(df_pca[:, 0], df_pca[:, 1], c=df['Cluster_Hierarchical'], cmap='viridis')
plt.title('Hierarchical Clustering (PCA projection)')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.colorbar()
plt.show()

# Visualize DBSCAN clustering result
plt.figure(figsize=(6, 4))
plt.scatter(df_pca[:, 0], df_pca[:, 1], c=df['Cluster_DBSCAN'], cmap='viridis')
plt.title('DBSCAN Clustering (PCA projection)')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.colorbar()
plt.show()
